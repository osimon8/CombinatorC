toplevel: XOR
##
## Ends in an error in state: 0.
##
## toplevel' -> . toplevel [ # ]
##
## The known suffix of the stack is as follows:
##
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: TSIGNAL XOR
##
## Ends in an error in state: 1.
##
## command -> TSIGNAL . IDENT ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TSIGNAL
##
 
Invalid expression 

toplevel: TSIGNAL IDENT XOR
##
## Ends in an error in state: 2.
##
## command -> TSIGNAL IDENT . ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TSIGNAL IDENT
##

Invalid expression 

toplevel: TSIGNAL IDENT ASSIGN XOR
##
## Ends in an error in state: 3.
##
## command -> TSIGNAL IDENT ASSIGN . bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TSIGNAL IDENT ASSIGN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT NOT XOR
##
## Ends in an error in state: 5.
##
## b_main -> NOT . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT MINUS XOR
##
## Ends in an error in state: 6.
##
## b_main -> MINUS . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IF LPAREN XOR
##
## Ends in an error in state: 7.
##
## b_main -> LPAREN . bexp RPAREN [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IF XOR
##
## Ends in an error in state: 9.
##
## bexp -> IF . bexp THEN bexp ELSE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IF IDENT TO
##
## Ends in an error in state: 11.
##
## b_main -> bexp . LOR bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR THEN RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## bexp -> IF bexp . THEN bexp ELSE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF bexp
##

Invalid expression

toplevel: OUTPUT IDENT XOR XOR
##
## Ends in an error in state: 12.
##
## b_main -> bexp XOR . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp XOR
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT XOR IDENT UNION
##
## Ends in an error in state: 13.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp XOR bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp XOR bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT RSHIFT XOR
##
## Ends in an error in state: 14.
##
## b_main -> bexp RSHIFT . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp RSHIFT
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT RSHIFT IDENT UNION
##
## Ends in an error in state: 15.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp RSHIFT bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp RSHIFT bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT PLUS XOR
##
## Ends in an error in state: 16.
##
## b_main -> bexp PLUS . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp PLUS
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT PLUS IDENT UNION
##
## Ends in an error in state: 17.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp PLUS bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp PLUS bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT MUL XOR
##
## Ends in an error in state: 18.
##
## b_main -> bexp MUL . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MUL
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT MUL IDENT UNION
##
## Ends in an error in state: 19.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp MUL bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MUL bexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: OUTPUT IDENT EXP XOR
##
## Ends in an error in state: 20.
##
## b_main -> bexp EXP . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp EXP
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT EXP IDENT UNION
##
## Ends in an error in state: 21.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp EXP bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp EXP bexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: OUTPUT IDENT MOD XOR
##
## Ends in an error in state: 23.
##
## b_main -> bexp MOD . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MOD
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT MOD IDENT UNION
##
## Ends in an error in state: 24.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp MOD bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MOD bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT DIV XOR
##
## Ends in an error in state: 25.
##
## b_main -> bexp DIV . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp DIV
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT DIV IDENT UNION
##
## Ends in an error in state: 26.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp DIV bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp DIV bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT MINUS XOR
##
## Ends in an error in state: 27.
##
## b_main -> bexp MINUS . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MINUS
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT MINUS IDENT UNION
##
## Ends in an error in state: 28.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp MINUS bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp MINUS bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT NEQ XOR
##
## Ends in an error in state: 29.
##
## b_main -> bexp NEQ . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp NEQ
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT NEQ IDENT UNION
##
## Ends in an error in state: 30.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp NEQ bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp NEQ bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LTE XOR
##
## Ends in an error in state: 31.
##
## b_main -> bexp LTE . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LTE
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LTE IDENT UNION
##
## Ends in an error in state: 32.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LTE bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LTE bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LSHIFT XOR
##
## Ends in an error in state: 33.
##
## b_main -> bexp LSHIFT . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LSHIFT
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LSHIFT IDENT UNION
##
## Ends in an error in state: 34.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LSHIFT bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LSHIFT bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LT XOR
##
## Ends in an error in state: 35.
##
## b_main -> bexp LT . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LT
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LT IDENT UNION
##
## Ends in an error in state: 36.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LT bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LT bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT GTE XOR
##
## Ends in an error in state: 37.
##
## b_main -> bexp GTE . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp GTE
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT GTE IDENT UNION
##
## Ends in an error in state: 38.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp GTE bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp GTE bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT GT XOR
##
## Ends in an error in state: 39.
##
## b_main -> bexp GT . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp GT
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT GT IDENT UNION
##
## Ends in an error in state: 40.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp GT bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp GT bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LNEQ XOR
##
## Ends in an error in state: 41.
##
## b_main -> bexp LNEQ . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LNEQ
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LNEQ IDENT UNION
##
## Ends in an error in state: 42.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LNEQ bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LNEQ bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LEQ XOR
##
## Ends in an error in state: 43.
##
## b_main -> bexp LEQ . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LEQ
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LEQ IDENT UNION
##
## Ends in an error in state: 44.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LEQ bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LEQ bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT EQ XOR
##
## Ends in an error in state: 45.
##
## b_main -> bexp EQ . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp EQ
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT EQ IDENT UNION
##
## Ends in an error in state: 46.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp EQ bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp EQ bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT AND XOR
##
## Ends in an error in state: 47.
##
## b_main -> bexp AND . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp AND
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT AND IDENT UNION
##
## Ends in an error in state: 48.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp AND bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp AND bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IF IDENT THEN XOR
##
## Ends in an error in state: 49.
##
## bexp -> IF bexp THEN . bexp ELSE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF bexp THEN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IF IDENT THEN IDENT TO
##
## Ends in an error in state: 50.
##
## b_main -> bexp . LOR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ ELSE DIV COALESCE AND ]
## bexp -> IF bexp THEN bexp . ELSE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF bexp THEN bexp
##

Invalid expression 

toplevel: OUTPUT IDENT OR XOR
##
## Ends in an error in state: 51.
##
## b_main -> bexp OR . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp OR
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT OR IDENT UNION
##
## Ends in an error in state: 52.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp OR bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp OR bexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: OUTPUT IDENT LOR XOR
##
## Ends in an error in state: 53.
##
## b_main -> bexp LOR . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LOR
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LOR IDENT UNION
##
## Ends in an error in state: 54.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LOR bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LOR bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT LAND XOR
##
## Ends in an error in state: 55.
##
## b_main -> bexp LAND . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LAND
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT LAND IDENT UNION
##
## Ends in an error in state: 56.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp LAND bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp LAND bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IF IDENT THEN IDENT ELSE XOR
##
## Ends in an error in state: 57.
##
## bexp -> IF bexp THEN bexp ELSE . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF bexp THEN bexp ELSE
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IF IDENT THEN IDENT ELSE IDENT UNION
##
## Ends in an error in state: 58.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## bexp -> IF bexp THEN bexp ELSE bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## IF bexp THEN bexp ELSE bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT COALESCE XOR
##
## Ends in an error in state: 59.
##
## b_main -> bexp COALESCE . bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp COALESCE
##

Missing right operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT COALESCE IDENT UNION
##
## Ends in an error in state: 60.
##
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp COALESCE bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp COALESCE bexp
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT LPAREN LIT TO
##
## Ends in an error in state: 61.
##
## b_main -> bexp . LOR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> LPAREN bexp . RPAREN [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## LPAREN bexp
##

Invalid expression 

toplevel: OUTPUT MINUS IDENT UNION
##
## Ends in an error in state: 63.
##
## b_main -> MINUS bexp . [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO THEN SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ ELSE DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## MINUS bexp
##

Cannot compose numeric expression with circuit 

toplevel: TSIGNAL IDENT ASSIGN IDENT TO
##
## Ends in an error in state: 65.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## command -> TSIGNAL IDENT ASSIGN bexp . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TSIGNAL IDENT ASSIGN bexp
##

Invalid expression 

toplevel: TINT XOR
##
## Ends in an error in state: 67.
##
## command -> TINT . IDENT ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TINT
##

Invalid expression 

toplevel: TINT IDENT XOR
##
## Ends in an error in state: 68.
##
## command -> TINT IDENT . ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TINT IDENT
##

Invalid expression 

toplevel: TINT IDENT ASSIGN XOR
##
## Ends in an error in state: 69.
##
## command -> TINT IDENT ASSIGN . bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TINT IDENT ASSIGN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: TINT IDENT ASSIGN IDENT TO
##
## Ends in an error in state: 70.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## command -> TINT IDENT ASSIGN bexp . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TINT IDENT ASSIGN bexp
##

Invalid expression 

toplevel: TCONDITION XOR
##
## Ends in an error in state: 72.
##
## command -> TCONDITION . IDENT ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TCONDITION
##

Invalid expression 

toplevel: TCONDITION IDENT XOR
##
## Ends in an error in state: 73.
##
## command -> TCONDITION IDENT . ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TCONDITION IDENT
##

Invalid expression 

toplevel: TCONDITION IDENT ASSIGN XOR
##
## Ends in an error in state: 74.
##
## command -> TCONDITION IDENT ASSIGN . bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TCONDITION IDENT ASSIGN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: TCONDITION IDENT ASSIGN IDENT TO
##
## Ends in an error in state: 75.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## command -> TCONDITION IDENT ASSIGN bexp . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## TCONDITION IDENT ASSIGN bexp
##

Invalid expression 

toplevel: OUTPUT XOR
##
## Ends in an error in state: 77.
##
## output -> OUTPUT . circuit AT tuple [ SEMI ]
## output -> OUTPUT . circuit [ SEMI ]
## output -> OUTPUT . bexp AT tuple [ SEMI ]
## output -> OUTPUT . bexp [ SEMI ]
##
## The known suffix of the stack is as follows:
## OUTPUT
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT LPAREN XOR
##
## Ends in an error in state: 78.
##
## b_main -> LPAREN . bexp RPAREN [ XOR SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## circuit -> LPAREN . circuit RPAREN [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT TSIGNAL
##
## Ends in an error in state: 79.
##
## b_main -> IDENT . [ XOR TO SEMI RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE AT ASSIGN AND ]
## expression -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,arg)) RPAREN [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
## expression -> IDENT . [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Invalid expression 

toplevel: OUTPUT IDENT LPAREN XOR
##
## Ends in an error in state: 80.
##
## expression -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,arg)) RPAREN [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

Invalid expression 

toplevel: OUTPUT FOR XOR
##
## Ends in an error in state: 81.
##
## for_loop -> FOR . IDENT ASSIGN arg TO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
## for_loop -> FOR . IDENT ASSIGN arg DOWNTO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR
##

Invalid "for" expression, syntax is "<for> <var_name> = <exp> to/downto <exp> { <commands> }"

toplevel: OUTPUT FOR IDENT XOR
##
## Ends in an error in state: 82.
##
## for_loop -> FOR IDENT . ASSIGN arg TO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
## for_loop -> FOR IDENT . ASSIGN arg DOWNTO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT
##

Invalid "for" expression, syntax is "<for> <var_name> = <exp> to/downto <exp> { <commands> }"

toplevel: OUTPUT FOR IDENT ASSIGN XOR
##
## Ends in an error in state: 83.
##
## for_loop -> FOR IDENT ASSIGN . arg TO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
## for_loop -> FOR IDENT ASSIGN . arg DOWNTO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN
##

Invalid "for" expression, syntax is "<for> <var_name> = <exp> to/downto <exp> { <commands> }"

toplevel: CIRCUIT_BIND IDENT COLON LIT THEN
##
## Ends in an error in state: 86.
##
## arg -> bexp . [ TO RPAREN LBRACE DOWNTO COMMA ASSIGN ]
## b_main -> bexp . LOR bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LAND bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . COALESCE bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . OR bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . XOR bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . AND bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . EQ bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . NEQ bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LEQ bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LNEQ bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LT bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . GT bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LTE bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . GTE bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . LSHIFT bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . RSHIFT bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . PLUS bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . MINUS bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . MUL bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . DIV bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . MOD bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
## b_main -> bexp . EXP bexp [ XOR TO RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LBRACE LAND GTE GT EXP EQ DOWNTO DIV COMMA COALESCE ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## bexp
##

Cannot bind circuit output signal to literal 

toplevel: OUTPUT FOR IDENT ASSIGN LIT RPAREN
##
## Ends in an error in state: 87.
##
## for_loop -> FOR IDENT ASSIGN arg . TO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
## for_loop -> FOR IDENT ASSIGN arg . DOWNTO arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Closed parenthesis with no opening 

toplevel: OUTPUT FOR IDENT ASSIGN LIT TO XOR
##
## Ends in an error in state: 88.
##
## for_loop -> FOR IDENT ASSIGN arg TO . arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN arg TO
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT FOR IDENT ASSIGN LIT TO LIT TO
##
## Ends in an error in state: 89.
##
## for_loop -> FOR IDENT ASSIGN arg TO arg . block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN arg TO arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Invalid "for" expression, syntax is "<for> <var_name> = <exp> to/downto <exp> { <commands> }"

toplevel: OUTPUT FOR IDENT ASSIGN LIT DOWNTO LIT LBRACE XOR
##
## Ends in an error in state: 90.
##
## block -> LBRACE . c_seq RBRACE [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: CONCRETE XOR
##
## Ends in an error in state: 91.
##
## command -> CONCRETE . CIRCUIT_BIND IDENT COLON arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE
##

Invalid expression, "concrete" can only appear before circuit binds 

toplevel: CONCRETE CIRCUIT_BIND XOR
##
## Ends in an error in state: 92.
##
## command -> CONCRETE CIRCUIT_BIND . IDENT COLON arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND
##

Invalid expression 

toplevel: CONCRETE CIRCUIT_BIND IDENT XOR
##
## Ends in an error in state: 93.
##
## command -> CONCRETE CIRCUIT_BIND IDENT . COLON arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND IDENT
##

Invalid expression 

toplevel: CONCRETE CIRCUIT_BIND IDENT COLON XOR
##
## Ends in an error in state: 94.
##
## command -> CONCRETE CIRCUIT_BIND IDENT COLON . arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND IDENT COLON
##

Invalid expression 

toplevel: CONCRETE CIRCUIT_BIND IDENT COLON LIT TO
##
## Ends in an error in state: 95.
##
## command -> CONCRETE CIRCUIT_BIND IDENT COLON arg . ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND IDENT COLON arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Invalid expression 

toplevel: CONCRETE CIRCUIT_BIND IDENT COLON LIT ASSIGN XOR
##
## Ends in an error in state: 96.
##
## command -> CONCRETE CIRCUIT_BIND IDENT COLON arg ASSIGN . bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND IDENT COLON arg ASSIGN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: CONCRETE CIRCUIT_BIND IDENT COLON LIT ASSIGN IDENT TO
##
## Ends in an error in state: 97.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## command -> CONCRETE CIRCUIT_BIND IDENT COLON arg ASSIGN bexp . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CONCRETE CIRCUIT_BIND IDENT COLON arg ASSIGN bexp
##

Invalid expression 

toplevel: CIRCUIT_BIND XOR
##
## Ends in an error in state: 99.
##
## command -> CIRCUIT_BIND . IDENT COLON arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
## command -> CIRCUIT_BIND . IDENT ASSIGN circuit SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND
##

Invalid expression 

toplevel: CIRCUIT_BIND IDENT XOR
##
## Ends in an error in state: 100.
##
## command -> CIRCUIT_BIND IDENT . COLON arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
## command -> CIRCUIT_BIND IDENT . ASSIGN circuit SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT
##

Invalid expression 

toplevel: CIRCUIT_BIND IDENT COLON XOR
##
## Ends in an error in state: 101.
##
## command -> CIRCUIT_BIND IDENT COLON . arg ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT COLON
##

Invalid expression 

toplevel: CIRCUIT_BIND IDENT COLON LIT TO
##
## Ends in an error in state: 102.
##
## command -> CIRCUIT_BIND IDENT COLON arg . ASSIGN bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT COLON arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Invalid expression 

toplevel: CIRCUIT_BIND IDENT COLON LIT ASSIGN XOR
##
## Ends in an error in state: 103.
##
## command -> CIRCUIT_BIND IDENT COLON arg ASSIGN . bexp SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT COLON arg ASSIGN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: CIRCUIT_BIND IDENT COLON LIT ASSIGN IDENT TO
##
## Ends in an error in state: 104.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## command -> CIRCUIT_BIND IDENT COLON arg ASSIGN bexp . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT COLON arg ASSIGN bexp
##

Invalid expression 

toplevel: CIRCUIT_BIND IDENT ASSIGN XOR
##
## Ends in an error in state: 106.
##
## command -> CIRCUIT_BIND IDENT ASSIGN . circuit SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT ASSIGN
##

Circuits bound to numeric expressions must have an output signal 

toplevel: CIRCUIT_BIND IDENT ASSIGN LPAREN XOR
##
## Ends in an error in state: 107.
##
## circuit -> LPAREN . circuit RPAREN [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Circuits bound to numeric expressions must have an output signal 

toplevel: CIRCUIT_BIND IDENT ASSIGN IDENT XOR
##
## Ends in an error in state: 108.
##
## expression -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,arg)) RPAREN [ UNION SEMI RPAREN CONCAT AT ]
## expression -> IDENT . [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Circuits bound to numeric expressions must have an output signal 

toplevel: OUTPUT LPAREN IDENT TO
##
## Ends in an error in state: 110.
##
## circuit -> circuit . UNION circuit [ UNION RPAREN CONCAT ]
## circuit -> circuit . CONCAT circuit [ UNION RPAREN CONCAT ]
## circuit -> LPAREN circuit . RPAREN [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## LPAREN circuit
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 79, spurious reduction of production expression -> IDENT
## In state 109, spurious reduction of production circuit -> expression
##

Invalid expression

toplevel: OUTPUT IDENT UNION XOR
##
## Ends in an error in state: 111.
##
## circuit -> circuit UNION . circuit [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## circuit UNION
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT UNION LPAREN IDENT RPAREN XOR
##
## Ends in an error in state: 112.
##
## circuit -> circuit . UNION circuit [ UNION SEMI RPAREN CONCAT AT ]
## circuit -> circuit UNION circuit . [ UNION SEMI RPAREN CONCAT AT ]
## circuit -> circuit . CONCAT circuit [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## circuit UNION circuit
##

Cannot compose numeric expression with circuit 

toplevel: OUTPUT IDENT CONCAT XOR
##
## Ends in an error in state: 113.
##
## circuit -> circuit CONCAT . circuit [ UNION SEMI RPAREN CONCAT AT ]
##
## The known suffix of the stack is as follows:
## circuit CONCAT
##

Cannot compose numeric expression with circuit 

toplevel: CIRCUIT_BIND IDENT ASSIGN IDENT RPAREN
##
## Ends in an error in state: 116.
##
## circuit -> circuit . UNION circuit [ UNION SEMI CONCAT ]
## circuit -> circuit . CONCAT circuit [ UNION SEMI CONCAT ]
## command -> CIRCUIT_BIND IDENT ASSIGN circuit . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## CIRCUIT_BIND IDENT ASSIGN circuit
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production expression -> IDENT
## In state 109, spurious reduction of production circuit -> expression
##

Closed parenthesis with no opening  

toplevel: OUTPUT LIT AT LPAREN IDENT COMMA IDENT RPAREN XOR
##
## Ends in an error in state: 118.
##
## command -> output . SEMI [ TSIGNAL TINT TCONDITION RBRACE OUTPUT EOF CONCRETE CIRCUIT_BIND ]
##
## The known suffix of the stack is as follows:
## output
##

Missing semicolon after output statement 

toplevel: OUTPUT LIT SEMI XOR
##
## Ends in an error in state: 121.
##
## list(command) -> command . list(command) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## command
##

Invalid command 

toplevel: OUTPUT FOR IDENT ASSIGN LIT DOWNTO LIT LBRACE OUTPUT LIT SEMI EOF
##
## Ends in an error in state: 123.
##
## block -> LBRACE c_seq . RBRACE [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## LBRACE c_seq
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 121, spurious reduction of production list(command) ->
## In state 122, spurious reduction of production list(command) -> command list(command)
## In state 120, spurious reduction of production c_seq -> list(command)
##

Unclosed braces, missing '}' to close "for" expression  

toplevel: OUTPUT FOR IDENT ASSIGN LIT DOWNTO XOR
##
## Ends in an error in state: 126.
##
## for_loop -> FOR IDENT ASSIGN arg DOWNTO . arg block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN arg DOWNTO
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT FOR IDENT ASSIGN LIT DOWNTO LIT TO
##
## Ends in an error in state: 127.
##
## for_loop -> FOR IDENT ASSIGN arg DOWNTO arg . block [ UNION TO SEMI RPAREN LBRACE DOWNTO CONCAT COMMA AT ASSIGN ]
##
## The known suffix of the stack is as follows:
## FOR IDENT ASSIGN arg DOWNTO arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Invalid "for" expression, syntax is "<for> <var_name> = <exp> to/downto <exp> { <commands> }"

toplevel: OUTPUT IDENT LPAREN LIT TO
##
## Ends in an error in state: 132.
##
## separated_nonempty_list(COMMA,arg) -> arg . [ RPAREN ]
## separated_nonempty_list(COMMA,arg) -> arg . COMMA separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 86, spurious reduction of production arg -> bexp
##

Invalid expression 

toplevel: OUTPUT IDENT LPAREN LIT COMMA XOR
##
## Ends in an error in state: 133.
##
## separated_nonempty_list(COMMA,arg) -> arg COMMA . separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg COMMA
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT IDENT TO
##
## Ends in an error in state: 135.
##
## circuit -> circuit . UNION circuit [ UNION SEMI CONCAT AT ]
## circuit -> circuit . CONCAT circuit [ UNION SEMI CONCAT AT ]
## output -> OUTPUT circuit . AT tuple [ SEMI ]
## output -> OUTPUT circuit . [ SEMI ]
##
## The known suffix of the stack is as follows:
## OUTPUT circuit
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 79, spurious reduction of production expression -> IDENT
## In state 109, spurious reduction of production circuit -> expression
##

Invalid expression 

toplevel: OUTPUT IDENT AT XOR
##
## Ends in an error in state: 136.
##
## output -> OUTPUT circuit AT . tuple [ SEMI ]
##
## The known suffix of the stack is as follows:
## OUTPUT circuit AT
##

Invalid expression 

toplevel: OUTPUT LIT AT LPAREN XOR
##
## Ends in an error in state: 137.
##
## tuple -> LPAREN . bexp COMMA bexp RPAREN [ SEMI ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT LIT AT LPAREN IDENT TO
##
## Ends in an error in state: 138.
##
## b_main -> bexp . LOR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COMMA COALESCE AND ]
## tuple -> LPAREN bexp . COMMA bexp RPAREN [ SEMI ]
##
## The known suffix of the stack is as follows:
## LPAREN bexp
##

Invalid expression 

toplevel: OUTPUT LIT AT LPAREN IDENT COMMA XOR
##
## Ends in an error in state: 139.
##
## tuple -> LPAREN bexp COMMA . bexp RPAREN [ SEMI ]
##
## The known suffix of the stack is as follows:
## LPAREN bexp COMMA
##

Missing left operand of binary operator, syntax is "<exp> <bop> <exp>"

toplevel: OUTPUT LIT AT LPAREN IDENT COMMA IDENT TO
##
## Ends in an error in state: 140.
##
## b_main -> bexp . LOR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LAND bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . COALESCE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . OR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . XOR bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . AND bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . NEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LNEQ bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LTE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . GTE bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . LSHIFT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . RSHIFT bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . PLUS bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MINUS bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MUL bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . DIV bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . MOD bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## b_main -> bexp . EXP bexp [ XOR RSHIFT RPAREN PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AND ]
## tuple -> LPAREN bexp COMMA bexp . RPAREN [ SEMI ]
##
## The known suffix of the stack is as follows:
## LPAREN bexp COMMA bexp
##

Invalid expression 

toplevel: OUTPUT LIT TO
##
## Ends in an error in state: 143.
##
## b_main -> bexp . LOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LAND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . COALESCE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . OR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . XOR bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . AND bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . EQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . NEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LNEQ bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . GT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . GTE bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . LSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . RSHIFT bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . PLUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . MINUS bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . MUL bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . DIV bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . MOD bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## b_main -> bexp . EXP bexp [ XOR SEMI RSHIFT PLUS OR NEQ MUL MOD MINUS LTE LT LSHIFT LOR LNEQ LEQ LAND GTE GT EXP EQ DIV COALESCE AT AND ]
## output -> OUTPUT bexp . AT tuple [ SEMI ]
## output -> OUTPUT bexp . [ SEMI ]
##
## The known suffix of the stack is as follows:
## OUTPUT bexp
##

Invalid expression 

toplevel: OUTPUT LIT AT XOR
##
## Ends in an error in state: 144.
##
## output -> OUTPUT bexp AT . tuple [ SEMI ]
##
## The known suffix of the stack is as follows:
## OUTPUT bexp AT
##

Invalid output location 

toplevel: OUTPUT LIT SEMI RBRACE
##
## Ends in an error in state: 148.
##
## toplevel -> program . EOF [ # ]
##
## The known suffix of the stack is as follows:
## program
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 121, spurious reduction of production list(command) ->
## In state 122, spurious reduction of production list(command) -> command list(command)
## In state 120, spurious reduction of production c_seq -> list(command)
## In state 154, spurious reduction of production program -> c_seq
##

Invalid command 

toplevel: DIRECTIVE XOR
##
## Ends in an error in state: 151.
##
## dir_seq -> dir_seq . directive [ TSIGNAL TINT TCONDITION OUTPUT EOF DIRECTIVE CONCRETE CIRCUIT_BIND ]
## program -> dir_seq . c_seq [ EOF ]
##
## The known suffix of the stack is as follows:
## dir_seq
##

Invalid directive argument  

